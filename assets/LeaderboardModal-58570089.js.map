{"version":3,"file":"LeaderboardModal-58570089.js","sources":["../../src/ui/LeaderboardModal.ts"],"sourcesContent":["import { languageManager } from '../i18n/LanguageManager'\nimport { scoreService } from '../systems/SupabaseClient'\nimport { authManager } from '../systems/AuthManager'\n\nexport interface LeaderboardEntry {\n  id: number\n  score: number\n  run_seconds: number\n  created_at: string\n  nickname: string\n  user_id: string\n}\n\nexport class LeaderboardModal {\n  private modal: HTMLElement | null = null\n  private currentView: 'weekly' | 'monthly' = 'weekly'\n  private isLoading = false\n\n  constructor() {\n    this.createModal()\n    this.setupEventListeners()\n  }\n\n  private createModal(): void {\n    this.modal = document.createElement('div')\n    this.modal.id = 'leaderboard-modal'\n    this.modal.className = 'leaderboard-modal'\n    this.modal.style.display = 'none'\n\n    this.modal.innerHTML = `\n      <div class=\"leaderboard-modal-backdrop\"></div>\n      <div class=\"leaderboard-modal-content\">\n        <button class=\"leaderboard-close-btn\" id=\"leaderboard-close\">&times;</button>\n\n        <div class=\"leaderboard-header\">\n          <h2 class=\"leaderboard-title\" data-i18n=\"leaderboardTitle\">üèÜ Classifica</h2>\n          <div class=\"leaderboard-tabs\">\n            <button class=\"leaderboard-tab active\" data-tab=\"weekly\" data-i18n=\"leaderboardWeekly\">\n              üìÖ Settimanale\n            </button>\n            <button class=\"leaderboard-tab\" data-tab=\"monthly\" data-i18n=\"leaderboardMonthly\">\n              üìÜ Mensile\n            </button>\n          </div>\n        </div>\n\n        <div class=\"leaderboard-content\">\n          <div class=\"leaderboard-loading\" id=\"leaderboard-loading\">\n            <div class=\"spinner\"></div>\n            <p data-i18n=\"leaderboardLoading\">Caricamento classifica...</p>\n          </div>\n\n          <div class=\"leaderboard-list\" id=\"leaderboard-list\">\n            <!-- Dynamic content -->\n          </div>\n\n          <div class=\"leaderboard-empty\" id=\"leaderboard-empty\" style=\"display: none\">\n            <p data-i18n=\"leaderboardEmpty\">Nessun punteggio ancora registrato!</p>\n            <p class=\"leaderboard-encourage\" data-i18n=\"leaderboardEncourage\">\n              Sii il primo a giocare e stabilire il record!\n            </p>\n          </div>\n        </div>\n\n        <div class=\"leaderboard-footer\">\n          <p class=\"leaderboard-info\" data-i18n=\"leaderboardInfo\">\n            üí° Accedi per competere per i premi settimanali e mensili!\n          </p>\n        </div>\n      </div>\n    `\n\n    document.body.appendChild(this.modal)\n  }\n\n  private setupEventListeners(): void {\n    // Close button\n    const closeBtn = this.modal?.querySelector('#leaderboard-close')\n    closeBtn?.addEventListener('click', () => this.hide())\n\n    // Backdrop click\n    const backdrop = this.modal?.querySelector('.leaderboard-modal-backdrop')\n    backdrop?.addEventListener('click', () => this.hide())\n\n    // Tab switching\n    const tabs = this.modal?.querySelectorAll('.leaderboard-tab')\n    tabs?.forEach(tab => {\n      tab.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement\n        const tabType = target.getAttribute('data-tab') as 'weekly' | 'monthly'\n        this.switchTab(tabType)\n      })\n    })\n\n    // Language change listener\n    languageManager.onLanguageChange(() => {\n      this.updateTranslations()\n    })\n\n    // ESC key\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape' && this.modal?.style.display !== 'none') {\n        this.hide()\n      }\n    })\n  }\n\n  private updateTranslations(): void {\n    if (!this.modal) return\n\n    const translation = languageManager.getTranslation()\n    this.modal.querySelectorAll('[data-i18n]').forEach(element => {\n      const key = element.getAttribute('data-i18n')\n      if (key && key in translation) {\n        element.textContent = (translation as any)[key]\n      }\n    })\n  }\n\n  private switchTab(tab: 'weekly' | 'monthly'): void {\n    if (this.currentView === tab || this.isLoading) return\n\n    this.currentView = tab\n\n    // Update tab UI\n    const tabs = this.modal?.querySelectorAll('.leaderboard-tab')\n    tabs?.forEach(tabEl => {\n      tabEl.classList.remove('active')\n      if (tabEl.getAttribute('data-tab') === tab) {\n        tabEl.classList.add('active')\n      }\n    })\n\n    // Load new data\n    this.loadLeaderboard()\n  }\n\n  private async loadLeaderboard(): Promise<void> {\n    if (!this.modal || this.isLoading) return\n\n    this.isLoading = true\n    this.showLoading()\n\n    try {\n      console.log(`üèÜ Loading ${this.currentView} leaderboard...`)\n\n      let entries: LeaderboardEntry[] = []\n\n      if (this.currentView === 'weekly') {\n        entries = await this.getWeeklyLeaderboard()\n      } else {\n        entries = await this.getMonthlyLeaderboard()\n      }\n\n      this.renderLeaderboard(entries)\n\n    } catch (error) {\n      console.error('Error loading leaderboard:', error)\n      this.showError()\n    } finally {\n      this.isLoading = false\n      this.hideLoading()\n    }\n  }\n\n  private async getWeeklyLeaderboard(): Promise<LeaderboardEntry[]> {\n    // Simplified version - get scores directly from scores table\n    // TODO: Add proper join with profiles when nickname column is available\n    const entries = await scoreService.getWeeklyLeaderboard(50)\n    return entries.map(entry => ({\n      id: entry.id,\n      score: entry.score,\n      run_seconds: entry.run_seconds,\n      created_at: entry.created_at,\n      nickname: entry.nickname || 'Anonimo',\n      user_id: entry.user_id\n    }))\n  }\n\n  private async getMonthlyLeaderboard(): Promise<LeaderboardEntry[]> {\n    // Simplified version - get scores directly from scores table\n    const entries = await scoreService.getMonthlyLeaderboard(50)\n    return entries.map(entry => ({\n      id: entry.id,\n      score: entry.score,\n      run_seconds: entry.run_seconds,\n      created_at: entry.created_at,\n      nickname: entry.nickname || 'Anonimo',\n      user_id: entry.user_id\n    }))\n  }\n\n  private renderLeaderboard(entries: LeaderboardEntry[]): void {\n    if (!this.modal) return\n\n    const listContainer = this.modal.querySelector('#leaderboard-list') as HTMLElement\n    const emptyContainer = this.modal.querySelector('#leaderboard-empty') as HTMLElement\n\n    if (entries.length === 0) {\n      listContainer.style.display = 'none'\n      emptyContainer.style.display = 'block'\n      return\n    }\n\n    emptyContainer.style.display = 'none'\n    listContainer.style.display = 'block'\n\n    const currentUserId = authManager.getState().user?.id\n\n    listContainer.innerHTML = entries.map((entry, index) => {\n      const position = index + 1\n      const isCurrentUser = currentUserId === entry.user_id\n      const medal = position <= 3 ? this.getMedal(position) : `${position}.`\n\n      const date = new Date(entry.created_at).toLocaleDateString(\n        languageManager.getCurrentLanguage() === 'it' ? 'it-IT' : 'en-US',\n        { month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' }\n      )\n\n      return `\n        <div class=\"leaderboard-entry ${isCurrentUser ? 'current-user' : ''}\">\n          <div class=\"leaderboard-position\">${medal}</div>\n          <div class=\"leaderboard-player\">\n            <div class=\"leaderboard-nickname\">${entry.nickname}</div>\n            <div class=\"leaderboard-date\">${date}</div>\n          </div>\n          <div class=\"leaderboard-score\">\n            <div class=\"score-value\">${entry.score}</div>\n            <div class=\"score-time\">${entry.run_seconds}s</div>\n          </div>\n        </div>\n      `\n    }).join('')\n  }\n\n  private getMedal(position: number): string {\n    switch (position) {\n      case 1: return 'ü•á'\n      case 2: return 'ü•à'\n      case 3: return 'ü•â'\n      default: return `${position}.`\n    }\n  }\n\n  private showLoading(): void {\n    if (!this.modal) return\n\n    const loading = this.modal.querySelector('#leaderboard-loading') as HTMLElement\n    const list = this.modal.querySelector('#leaderboard-list') as HTMLElement\n    const empty = this.modal.querySelector('#leaderboard-empty') as HTMLElement\n\n    loading.style.display = 'flex'\n    list.style.display = 'none'\n    empty.style.display = 'none'\n  }\n\n  private hideLoading(): void {\n    if (!this.modal) return\n\n    const loading = this.modal.querySelector('#leaderboard-loading') as HTMLElement\n    loading.style.display = 'none'\n  }\n\n  private showError(): void {\n    if (!this.modal) return\n\n    const listContainer = this.modal.querySelector('#leaderboard-list') as HTMLElement\n    listContainer.innerHTML = `\n      <div class=\"leaderboard-error\">\n        <p>‚ùå Errore nel caricamento della classifica</p>\n        <button onclick=\"location.reload()\" class=\"retry-btn\">üîÑ Riprova</button>\n      </div>\n    `\n    listContainer.style.display = 'block'\n  }\n\n  public show(): void {\n    if (!this.modal) return\n\n    this.modal.style.display = 'flex'\n    this.updateTranslations()\n    this.loadLeaderboard()\n\n    console.log('üèÜ Leaderboard modal opened')\n  }\n\n  public hide(): void {\n    if (!this.modal) return\n\n    this.modal.style.display = 'none'\n    console.log('üèÜ Leaderboard modal closed')\n  }\n\n  public destroy(): void {\n    if (this.modal) {\n      this.modal.remove()\n      this.modal = null\n    }\n  }\n}"],"names":["LeaderboardModal","__publicField","closeBtn","_a","backdrop","_b","tabs","_c","tab","e","tabType","languageManager","translation","element","key","tabEl","entries","error","scoreService","entry","listContainer","emptyContainer","currentUserId","authManager","index","position","isCurrentUser","medal","date","loading","list","empty"],"mappings":"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"}